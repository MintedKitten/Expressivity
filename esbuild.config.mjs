import{readdirSync as x,statSync as P,existsSync as D,mkdirSync as $,rmSync as F,createReadStream as L,writeFileSync as j}from"fs";import v,{join as o}from"path";import k from"./node_modules/esbuild/lib/main.js";import{nodeExternalsPlugin as E}from"./node_modules/esbuild-node-externals/dist/index.js";import V from"readline";import{Parser as R}from"./node_modules/acorn/dist/acorn.mjs";import U from"./node_modules/acorn-jsx/index.js";var p="src",u="build",y="esm",B=!1,T=!0,g=[],I=[""],s=y==="esm"?"mjs":"js";for(let e of I)x(o(process.cwd(),p,e)).filter(t=>{let n=o(e,t),c=P(o(process.cwd(),p,n));c.isFile()?t.endsWith(".ts")&&g.push(o(e,t)):c.isDirectory()&&I.push(o(e,t))});var m=o(process.cwd(),u);D(m)&&F(m,{recursive:!0});$(m);await k.build({entryPoints:g.map(e=>o(p,e)),outdir:u,outExtension:{".js":`.${s}`},bundle:!1,sourcemap:!1,minify:B,splitting:!1,format:y,platform:"node",target:"esnext",allowOverwrite:T,plugins:[E()]}).then(e=>{console.log(e)}).catch(e=>{console.log(e)});y==="esm"&&await O(g).then(e=>{console.log(e)}).catch(e=>{console.log(e)});async function O(e){for(let t=0;t<e.length;t++){let n=e[t],c=!1,a="",d=v.parse(o(u,n)),l=`${d.dir}/${d.name}.${s}`;await new Promise((b,w)=>{try{V.createInterface({input:L(l),crlfDelay:1/0}).on("line",i=>{let N=R.extend(U()).parse(i,{ecmaVersion:"latest",sourceType:"module"}).body;for(let f=0;f<N.length;f++){let r=N[f];try{if(r.type==="ImportDeclaration"){let A=i.substring(r.source.start+1,r.source.end-1).trim(),S=o(d.dir,`${A}.${s}`);if(D(S))a+=`${i.substring(r.start,r.source.end-1)}.${s}${i.substring(r.source.end-1,r.end)}`,c=!0;else throw new Error("Import is not local file")}else throw new Error("Not an Import statement")}catch{a+=i.substring(r.start,r.end)}}}).on("close",()=>{console.log(`${n} has been scanned`),b(!0)})}catch{w(`Update error on file name: ${n}`)}}),c&&(console.log(o(process.cwd(),l)),j(l,a,{flag:"w"}))}return!0}
